>> INDEX <<

<!DOCTYPE html>
<html lang="pt-br">
<head>
<link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="css/estilos.css">
</head>
<body>
<div class="grid">
<canvas id="painel" class="painel-jogo"></canvas>
<div class="right-column">
<div>
<h1>TETRIS</h1>
<p>Pontuação: <span id="pontos">0</span></p>
<p>Linhas: <span id="linhas">0</span></p>
<p>Nivel: <span id="nivel">0</span></p>
<canvas id="proximo" class="proximo"></canvas>
</div>
<button onclick="play()" class="play-btn">Play</button>
</div>
</div>
<script type="text/javascript" src="javascript/constantes.js"></script>
<script type="text/javascript" src="javascript/painel.js"></script>
<script type="text/javascript" src="javascript/pecas.js"></script>
<script type="text/javascript" src="javascript/main.js"></script>
</body>
</html>

>> CSS << 

*{
	font-family: 'Press Start 2P', cursive;
}
.grid {
	display: grid;
	grid-template-columns: 320px 200px;
}
.right-column {
	display: flex;
	flex-direction: column;
	justify-content: space-between;
}
.painel-jogo {
	border: solid 2px;
}
.play-btn {
	background-color: #4caf50;
	font-size: 16px;
	padding: 15px 30px;
	cursor: pointer;
}

>>  CONSTANTES <<

'use strict';
const COLUNA= 10;
const LINHA= 20;
const TAM_BLOCO= 30;

const KEY ={
	LEFT: 37,
	RIGHT: 39,
	DOWN: 40,
	SPACE: 32
}
Object.freeze(KEY);

const movimento ={
	[KEY.LEFT]: p => ({ ...p, x: p.x - 1 }),
	[KEY.RIGHT]: p => ({ ...p, x: p.x + 1 }),
	[KEY.DOWN]: P => ({ ...p, y: p.y + 1 }),
};

>> MAIN <<

ctx.canvas.width = COLUNA * TAM_BLOCO;
ctx.canvas.height = LINHA * TAM_BLOCO;
ctx.scale(TAM_BLOCO, TAM_BLOCO);

let painel = new Painel();

function play() {
	painel.reset();
	let peca = new Peca(ctx);
	peca.desenho();
	
	painel.peca = peca;
	console.table(painel.grid);


document.addEventListener('keydown', event => {
	if (movimento[event.keyCode]) {
		event.preventDefault();
		
		let p = movimento[event.keyCode](painel.peca);
		
		if (event.keyCode === KEY.SPACE) {
			while (painel.validar(p)) {
				painel.peca.mober(p);
				p = movimento[KEY.DOWN](painel.peca);
				ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
				
				painel.peca.desenho();
			}
		}
		if (painel.validar(p)) {
			painel.peca.mover(p);
			ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
		}
	}
});
}

>> PAINEL <<

class Painel {
	reset() {
		this.grid = this.getPainelVazio();
	}
	
	
	getPainelVazio() {
 return Array.from(
 {length: LINHA}, () => Array(COLUNA).fill(0)
		
);
	}


validar(p) {
	return p.shape.every((row, dy) => {
		return row.every((value, dx) => {
			let x = p.x + dx;
			let y = p.y + dy;
			return ( 
			this.grid[y] && this.grid[y][x] === 0 ||
			(x >= 0 && x < COLUNA && y <= LINHA)
			);
		});
	});
}	
}

>>PECAS<<

class Peca {
	constructor(ctx) {
		this.ctx = ctx;
		this.color = 'blue';
		this.shape = [
		[2,0,0],
		[2,2,2],
		[0,0,0]
		];
		
		this.x = 3;
		this.y = 0;
	}


desenho(){
	this.ctx.fillStyle = this.color;
	this.shape.forEach((row, y) => {
		row.forEach((value, x) => {
			if (value > 0) {
				this.ctx.fillRect(this.x + x, this.y + y, 1, 1);
			}
		});
	});
}

mover (p){
	this.x = p.x;
	this.y = p.y;
}
}